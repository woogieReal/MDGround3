import { Tree } from "@/src/models/tree.model";

export const mockGetTreesData: Tree[] = [
  {
    treeId: "77",
    treeType: 10,
    treeName: "javascript",
    treePath: "",
    treeChildren: [
      {
        treeId: "88",
        treeType: 20,
        treeName: "Array",
        treePath: "77",
        treeChildren: [],
      },
      {
        treeId: "653",
        treeType: 20,
        treeName: "정규식",
        treePath: "77",
        treeChildren: [],
      },
      {
        treeId: "87",
        treeType: 20,
        treeName: "Object",
        treePath: "77",
        treeChildren: [],
      },
      {
        treeId: "78",
        treeType: 20,
        treeName: "change element id and treeName",
        treePath: "77",
        treeChildren: [],
      },
      {
        treeId: "79",
        treeType: 20,
        treeName: "window.onload",
        treePath: "77",
        treeChildren: [],
      },
      {
        treeId: "80",
        treeType: 20,
        treeName: "window.location.reload()",
        treePath: "77",
        treeChildren: [],
      },
      {
        treeId: "81",
        treeType: 20,
        treeName: "async vs defer",
        treePath: "77",
        treeChildren: [],
      },
      {
        treeId: "82",
        treeType: 20,
        treeName: "use strict",
        treePath: "77",
        treeChildren: [],
      },
      {
        treeId: "83",
        treeType: 20,
        treeName: "data types: primative",
        treePath: "77",
        treeChildren: [],
      },
      {
        treeId: "84",
        treeType: 20,
        treeName: "Operator",
        treePath: "77",
        treeChildren: [],
      },
      {
        treeId: "85",
        treeType: 20,
        treeName: "Function",
        treePath: "77",
        treeChildren: [],
      },
      {
        treeId: "86",
        treeType: 20,
        treeName: "Class",
        treePath: "77",
        treeChildren: [],
      },
      {
        treeId: "89",
        treeType: 20,
        treeName: "JSON",
        treePath: "77",
        treeChildren: [],
      },
      {
        treeId: "90",
        treeType: 20,
        treeName: "Promise",
        treePath: "77",
        treeChildren: [],
      },
      {
        treeId: "91",
        treeType: 20,
        treeName: "aync & await",
        treePath: "77",
        treeChildren: [],
      },
      {
        treeId: "95",
        treeType: 20,
        treeName: "key event",
        treePath: "77",
        treeChildren: [],
      },
      {
        treeId: "317",
        treeType: 20,
        treeName: "문자열 특정문자 갯수 찾기",
        treePath: "77",
        treeChildren: [],
      },
      {
        treeId: "383",
        treeType: 20,
        treeName: "Optional chaining",
        treePath: "77",
        treeChildren: [],
      },
      {
        treeId: "1212",
        treeType: 20,
        treeName: "changeCommaToHash",
        treePath: "77",
        treeChildren: [],
      },
    ],
  },
  {
    treeId: "484",
    treeType: 10,
    treeName: "파이썬",
    treePath: "",
    treeChildren: [
      {
        treeId: "496",
        treeType: 10,
        treeName: "Sequence Types",
        treePath: "484",
        treeChildren: [
          {
            treeId: "487",
            treeType: 20,
            treeName: "\bSequence",
            treePath: "484|496",
            treeChildren: [],
          },
          {
            treeId: "493",
            treeType: 20,
            treeName: "List",
            treePath: "484|496",
            treeChildren: [],
          },
          {
            treeId: "494",
            treeType: 20,
            treeName: "Tuple",
            treePath: "484|496",
            treeChildren: [],
          },
          {
            treeId: "495",
            treeType: 20,
            treeName: "Range",
            treePath: "484|496",
            treeChildren: [],
          },
        ],
      },
      {
        treeId: "497",
        treeType: 10,
        treeName: "Text Sequence Type",
        treePath: "484",
        treeChildren: [],
      },
      {
        treeId: "501",
        treeType: 10,
        treeName: "Set Types",
        treePath: "484",
        treeChildren: [],
      },
      {
        treeId: "555",
        treeType: 10,
        treeName: "Mapping Types",
        treePath: "484",
        treeChildren: [],
      },
      {
        treeId: "575",
        treeType: 10,
        treeName: "Django",
        treePath: "484",
        treeChildren: [],
      },
      {
        treeId: "577",
        treeType: 10,
        treeName: "Django REST framework",
        treePath: "484",
        treeChildren: [],
      },
      {
        treeId: "485",
        treeType: 20,
        treeName: "파이썬이란",
        treePath: "484",
        treeChildren: [],
      },
      {
        treeId: "486",
        treeType: 20,
        treeName: "기본 문법",
        treePath: "484",
        treeChildren: [],
      },
      {
        treeId: "488",
        treeType: 20,
        treeName: "data treeType",
        treePath: "484",
        treeChildren: [],
      },
      {
        treeId: "574",
        treeType: 20,
        treeName: "pip",
        treePath: "484",
        treeChildren: [],
      },
    ],
  },
  {
    treeId: "375",
    treeType: 10,
    treeName: "mysql",
    treePath: "",
    treeChildren: [
      {
        treeId: "582",
        treeType: 10,
        treeName: "응용",
        treePath: "375",
        treeChildren: [],
      },
      {
        treeId: "671",
        treeType: 10,
        treeName: "인덱스",
        treePath: "375",
        treeChildren: [],
      },
      {
        treeId: "679",
        treeType: 10,
        treeName: "내장 함수",
        treePath: "375",
        treeChildren: [],
      },
      {
        treeId: "1093",
        treeType: 10,
        treeName: "실행계획",
        treePath: "375",
        treeChildren: [],
      },
      {
        treeId: "680",
        treeType: 10,
        treeName: "정리",
        treePath: "375",
        treeChildren: [],
      },
      {
        treeId: "1105",
        treeType: 10,
        treeName: "구문분석",
        treePath: "375",
        treeChildren: [
          {
            treeId: "1125",
            treeType: 10,
            treeName: "CREATE",
            treePath: "375|1105",
            treeChildren: [],
          },
          {
            treeId: "1126",
            treeType: 10,
            treeName: "Compound Statement",
            treePath: "375|1105",
            treeChildren: [
              {
                treeId: "1130",
                treeType: 10,
                treeName: "Flow Control Statements",
                treePath: "375|1105|1126",
                treeChildren: [
                  {
                    treeId: "1131",
                    treeType: 20,
                    treeName: "CASE",
                    treePath: "375|1105|1126|1130",
                    treeChildren: [],
                  },
                  {
                    treeId: "1132",
                    treeType: 20,
                    treeName: "IF",
                    treePath: "375|1105|1126|1130",
                    treeChildren: [],
                  },
                  {
                    treeId: "1133",
                    treeType: 20,
                    treeName: "LOOP",
                    treePath: "375|1105|1126|1130",
                    treeChildren: [],
                  },
                  {
                    treeId: "1134",
                    treeType: 20,
                    treeName: "REPEAT",
                    treePath: "375|1105|1126|1130",
                    treeChildren: [],
                  },
                  {
                    treeId: "1135",
                    treeType: 20,
                    treeName: "WHILE",
                    treePath: "375|1105|1126|1130",
                    treeChildren: [],
                  },
                ],
              },
              {
                treeId: "1138",
                treeType: 10,
                treeName: "Condition Handling",
                treePath: "375|1105|1126",
                treeChildren: [],
              },
              {
                treeId: "1127",
                treeType: 20,
                treeName: "BEGIN ... END",
                treePath: "375|1105|1126",
                treeChildren: [],
              },
              {
                treeId: "1128",
                treeType: 20,
                treeName: "Statement Labels",
                treePath: "375|1105|1126",
                treeChildren: [],
              },
              {
                treeId: "1129",
                treeType: 20,
                treeName: "DECLARE",
                treePath: "375|1105|1126",
                treeChildren: [],
              },
              {
                treeId: "1136",
                treeType: 20,
                treeName: "CURSOR",
                treePath: "375|1105|1126",
                treeChildren: [],
              },
            ],
          },
          {
            treeId: "1227",
            treeType: 10,
            treeName: "Transactional and Locking Statements",
            treePath: "375|1105",
            treeChildren: [],
          },
        ],
      },
    ],
  },
  {
    treeId: "218",
    treeType: 10,
    treeName: "AWS",
    treePath: "",
    treeChildren: [],
  },
  {
    treeId: "1141",
    treeType: 10,
    treeName: "TanStack Query",
    treePath: "",
    treeChildren: [],
  },
  {
    treeId: "1191",
    treeType: 10,
    treeName: "terraform",
    treePath: "",
    treeChildren: [],
  },
  {
    treeId: "187",
    treeType: 10,
    treeName: "react",
    treePath: "",
    treeChildren: [],
  },
  {
    treeId: "96",
    treeType: 10,
    treeName: "typescript",
    treePath: "",
    treeChildren: [],
  },
  {
    treeId: "436",
    treeType: 10,
    treeName: "git",
    treePath: "",
    treeChildren: [],
  },
  {
    treeId: "92",
    treeType: 10,
    treeName: "java",
    treePath: "",
    treeChildren: [],
  },
  {
    treeId: "117",
    treeType: 10,
    treeName: "next",
    treePath: "",
    treeChildren: [],
  },
  {
    treeId: "206",
    treeType: 10,
    treeName: "React DnD",
    treePath: "",
    treeChildren: [],
  },
  {
    treeId: "182",
    treeType: 20,
    treeName: "용어",
    treePath: "",
    treeChildren: [],
  },
  {
    treeId: "129",
    treeType: 20,
    treeName: "PHP",
    treePath: "",
    treeChildren: [],
  },
  {
    treeId: "133",
    treeType: 20,
    treeName: "Cypress",
    treePath: "",
    treeChildren: [],
  },
  {
    treeId: "134",
    treeType: 20,
    treeName: "node.js",
    treePath: "",
    treeChildren: [],
  },
  {
    treeId: "135",
    treeType: 20,
    treeName: "inversify + typescript",
    treePath: "",
    treeChildren: [],
  },
  {
    treeId: "215",
    treeType: 20,
    treeName: "Redux",
    treePath: "",
    treeChildren: [],
  },
  {
    treeId: "216",
    treeType: 20,
    treeName: "Firebase",
    treePath: "",
    treeChildren: [],
  },
  {
    treeId: "217",
    treeType: 20,
    treeName: "netlify",
    treePath: "",
    treeChildren: [],
  },
  {
    treeId: "406",
    treeType: 20,
    treeName: "SWC",
    treePath: "",
    treeChildren: [],
  },
  {
    treeId: "409",
    treeType: 20,
    treeName: "Webpack",
    treePath: "",
    treeChildren: [],
  },
  {
    treeId: "441",
    treeType: 20,
    treeName: "쿠키/세션/토큰",
    treePath: "",
    treeChildren: [],
  },
  {
    treeId: "554",
    treeType: 20,
    treeName: "docker",
    treePath: "",
    treeChildren: [],
  },
  {
    treeId: "579",
    treeType: 20,
    treeName: "zsh",
    treePath: "",
    treeChildren: [],
  },
  {
    treeId: "1090",
    treeType: 20,
    treeName: "NVM",
    treePath: "",
    treeChildren: [],
  },
  {
    treeId: "1109",
    treeType: 20,
    treeName: "story book",
    treePath: "",
    treeChildren: [],
  },
  {
    treeId: "479",
    treeType: 20,
    treeName: "Go란",
    treePath: "",
    treeChildren: [],
  },
  {
    treeId: "483",
    treeType: 20,
    treeName: "oAuth란",
    treePath: "",
    treeChildren: [],
  },
  {
    treeId: "475",
    treeType: 20,
    treeName: "스벨트란",
    treePath: "",
    treeChildren: [],
  },
  {
    treeId: "477",
    treeType: 20,
    treeName: "Flutter란",
    treePath: "",
    treeChildren: [],
  },
];

export const mockGetTreeData: Tree[] = [
  {
    treeId: "87",
    treeType: 20,
    treeName: "Object",
    treeContent: "## Object\n---\n\n### literals and properties\n * class가 없어도 key와 value을 가진 쌍으로 만들 수 있다.\n * 자바스크립트는 dynamically typed language 이기 때문에 Object 선언 후에도 key를 선언/삭제가 가능하다.\n * 하지만 유지보수 측면에서 좋지 않다.\n``` javascript\nlet person = {name: 'woogie', age: 28};\nconsole.log(person);      -> {name: \"woogie\", age: 28}\n\nperson.nation = 'Korea';\nconsole.log(person);      -> {name: \"woogie\", age: 28, nation: \"Korea\"}\n\ndelete person.nation;\nconsole.log(person);      -> {name: \"woogie\", age: 28}\n```\n\n### computed properties\n * 객체.key 또는 객체['key'] 두 가지로 접근 가능\n * 주로 런타임 시에 동적으로 key를 주고 값을 받아야 할 때 사용한다.\n * 마찬가지로 선언 후에도 key값을 선언/삭제 가능\n``` javascript\nfunction printValue(obj, key) {\n    console.log(obj[key]);\n}\n\nprintValue(person, 'name');   -> woogie\nprintValue(person, 'age');    -> 28\n```\n\n### constructor function\n * class의 생성자 처럼 사용\n``` javascript\nfunction Person(name, age) {\n    this.name = name;\n    this.age = age;\n}\n\nlet person2 = new Person('woogie2', 25);\nconsole.log(person2);  -> Person {name: \"woogie2\", age: 25}\n```\n\n### in operator\n * 해당하는 오브젝트 안에 key가 있는지 없는지 확인 하는 것\n``` javascript\nconsole.log('name' in person);    -> true\nconsole.log('nation' in person);  -> false\n```\n\n\n### for..in, for..of\n * for..in: 맵구조의 객체에서 key 값을 기준으로 value를 뽑아내는 방법\n * for..of: 리스트 구조의 객체에서 값을 뽑아내는 방법\n``` javascript\nfor(let key in person){\n    console.log(person[key]);\n}\n-> woogie\n-> 28\n\nconst array = [1,2,3,4];\nfor(let value of array){\n    console.log(value);    \n}\n-> 1\n-> 2\n-> 3\n-> 4\n```\n\n### Object.assign\n`Object.assign()` 메서드는 출처 객체들의 모든 열거 가능한 자체 속성을 복사해 대상 객체에 붙여넣습니다. 그 후 대상 객체를 반환\n\n#### 구문\n```\nObject.assign(target, ...sources)\n```\n\n#### 예시\n```\nconst target = { a: 1, b: 2 };\nconst source = { b: 4, c: 5 };\n\nconst returnedTarget = Object.assign(target, source);\n\nconsole.log(target);\n// expected output: Object { a: 1, b: 4, c: 5 }\n\nconsole.log(returnedTarget);\n// expected output: Object { a: 1, b: 4, c: 5 }\n```\n\n#### 설명\n목표 객체의 속성 중 출처 객체와 동일한 키를 갖는 속성의 경우, 그 속성 값은 출처 객체의 속성 값으로 덮어씁니다. 출처 객체들의 속성 중에서도 키가 겹칠 경우 뒤쪽 객체의 속성 값이 앞쪽 객체의 속성 값보다 우선합니다.\n\n### 예제\n#### 객체 복제\n```\nconst obj = { a: 1 };\nconst copy = Object.assign({}, obj);\nconsole.log(copy); // { a: 1 }\n```\n\n#### 깊은 복사 주의점\n`Object.assign()` 은 속성의 값을 복사하기 때문에, 깊은 복사를 수행하려면 다른 방법을 사용해야 합니다.\n\n만약 출처 값이 객체에 대한 참조라면 참조 값만 복사합니다.\n```\nfunction test() {\n  'use strict';\n\n  let obj1 = { a: 0 , b: { c: 0}};\n  let obj2 = Object.assign({}, obj1);\n  console.log(JSON.stringify(obj2)); // { a: 0, b: { c: 0}}\n\n  obj1.a = 1;\n  console.log(JSON.stringify(obj1)); // { a: 1, b: { c: 0}}\n  console.log(JSON.stringify(obj2)); // { a: 0, b: { c: 0}}\n\n  obj2.a = 2;\n  console.log(JSON.stringify(obj1)); // { a: 1, b: { c: 0}}\n  console.log(JSON.stringify(obj2)); // { a: 2, b: { c: 0}}\n\n  obj2.b.c = 3;\n  console.log(JSON.stringify(obj1)); // { a: 1, b: { c: 3}}\n  console.log(JSON.stringify(obj2)); // { a: 2, b: { c: 3}}\n\n  // 깊은 복사\n  obj1 = { a: 0 , b: { c: 0}};\n  let obj3 = JSON.parse(JSON.stringify(obj1));\n  obj1.a = 4;\n  obj1.b.c = 4;\n  console.log(JSON.stringify(obj3)); // { a: 0, b: { c: 0}}\n}\n\ntest();\n```\n\n#### 객체 병합\n```\nconst o1 = { a: 1 };\nconst o2 = { b: 2 };\nconst o3 = { c: 3 };\n\nconst obj = Object.assign(o1, o2, o3);\nconsole.log(obj); // { a: 1, b: 2, c: 3 }\nconsole.log(o1);  // { a: 1, b: 2, c: 3 }, 목표 객체 자체가 변경됨.\n```\n\n#### 같은 속성을 가진 객체 병합\n```\nconst o1 = { a: 1, b: 1, c: 1 };\nconst o2 = { b: 2, c: 2 };\nconst o3 = { c: 3 };\n\nconst obj = Object.assign({}, o1, o2, o3);\nconsole.log(obj); // { a: 1, b: 2, c: 3 }\n```\n\n#### 심볼 속성 복사\n```\nconst o1 = { a: 1 };\nconst o2 = { [Symbol('foo')]: 2 };\n\nconst obj = Object.assign({}, o1, o2);\nconsole.log(obj); // { a : 1, [Symbol(\"foo\")]: 2 } (cf. bug 1207182 on Firefox)\nObject.getOwnPropertySymbols(obj); // [Symbol(foo)]\n```\n\n#### 프로토타입 체인의 속성과 열거 불가능한 속성은 복사 불가\n```\nconst obj = Object.create({ foo: 1 }, { // foo는 obj의 프로토타입 체인에 있음\n  bar: {\n    value: 2  // bar는 열거 불가능\n  },\n  baz: {\n    value: 3,\n    enumerable: true  // baz는 열거 가능한 자체 속성\n  }\n});\n\nconst copy = Object.assign({}, obj);\nconsole.log(copy); // { baz: 3 }\n```\n\n#### 원시 값은 객체로 래핑\n```\nconst v1 = 'abc';\nconst v2 = true;\nconst v3 = 10;\nconst v4 = Symbol('foo');\n\nconst obj = Object.assign({}, v1, null, v2, undefined, v3, v4);\n// 원시 값은 래핑하고, null과 undefined는 무시\n// 참고: 문자열 래퍼만 자체 열거형 속성을 가질 수 있음\nconsole.log(obj); // { \"0\": \"a\", \"1\": \"b\", \"2\": \"c\" }\n```\n\n#### 예외로 인한 복사 작업 중단\n```\nconst target = Object.defineProperty({}, 'foo', {\n  value: 1,\n  writable: false\n}); // target.foo는 읽기 전용 속성\n\nObject.assign(target, { bar: 2 }, { foo2: 3, foo: 3, foo3: 3 }, { baz: 4 });\n// TypeError: \"foo\" is read-only\n// target.foo에 할당할 때 예외 발생\n\nconsole.log(target.bar);  // 2, 첫 번째 출처 객체는 성공적으로 복사함\nconsole.log(target.foo2); // 3, 두 번째 출처 객체 중 첫 번째 속성도 성공적으로 복사함\nconsole.log(target.foo);  // 1, 여기에서 예외가 발생했음\nconsole.log(target.foo3); // undefined, assign 메서드가 종료됨, foo3은 복사되지 않음\nconsole.log(target.baz);  // undefined, 세 번째 출처 객체도 복사되지 않음\n```\n\n#### 접근자 복사\n```\nconst obj = {\n  foo: 1,\n  get bar() {\n    return 2;\n  }\n};\n\nlet copy = Object.assign({}, obj);\nconsole.log(copy);\n// { foo: 1, bar: 2 }, copy.bar의 값은 obj.bar의 접근자가 반환한 값\n\n// 속성의 온전한 기술자를 복사해 할당하는 함수\nfunction completeAssign(target, ...sources) {\n  sources.forEach(source => {\n    let descriptors = Object.keys(source).reduce((descriptors, key) => {\n      descriptors[key] = Object.getOwnPropertyDescriptor(source, key);\n      return descriptors;\n    }, {});\n\n    // 기본적으로 Object.assign은 열거 가능한 심볼도 복사함\n    Object.getOwnPropertySymbols(source).forEach(sym => {\n      let descriptor = Object.getOwnPropertyDescriptor(source, sym);\n      if (descriptor.enumerable) {\n        descriptors[sym] = descriptor;\n      }\n    });\n    Object.defineProperties(target, descriptors);\n  });\n  return target;\n}\n\ncopy = completeAssign({}, obj);\nconsole.log(copy);\n// { foo:1, get bar() { return 2 } }\n```",
    treePath: "77",
  },
  {
    treeId: "78",
    treeType: 20,
    treeName: "change element id and treeName",
    treeContent: "## 자바스크립트 id & name 값 변경하는 방법\n---\n\n### `setAttribute`\n---\n\ndocument.getElementById(\"기존 id\").setAttribute(\"name\", \"새로운 name\");  \ndocument.getElementById(\"기존 id\").setAttribute(\"id\", \"새로운 id\");\n\nid와 name값을 동시에 변경할 때는 name을 먼저 바꾸는 것이 좋다.  \nid를 지정해서 변경하는 것이기 때문에 실수를 할 수도 있기 때문.\n\n``` javascript\nfunction doSelectPost(no) {\n\n\tvar frm = document.getElementById(\"imageFrm\"+no+\"\");\n\tfrm.action = \"/feb/post/do_select_post.do\";\n\t\n\tdocument.getElementById(\"postNo\"+no+\"\").setAttribute(\"name\", \"postNo\");\n\tdocument.getElementById(\"postNo\"+no+\"\").setAttribute(\"id\", \"postNo\");\n\tdocument.getElementById(\"postNo\").value = no;\n\t\n\tfrm.submit();\n}\n```",
    treePath: "77",
  },
  {
    treeId: "79",
    treeType: 20,
    treeName: "window.onload",
    treeContent: "## 페이지가 모두 로드 된 후 스크립트를 읽도록 하기\n---\n\n### `window.onload`\n---\n\n페이지가 다 로드되기 전에 스크립트를 읽어 들이면 document.getElementById('id 값'); 에서  \nid 값을 가진 태그가 정의 되기 이전이므로 오류가 일어날 수 있다.  \n가장 쉬운 방법은 스크립트를 html 문서의 가장 아래에 두는 것.  \n아니면 **window.onload** 사용한다.  \n\n``` javascript\nwindow.onload = function() { 스크립트 }\n```\n\n웹브라우저 자체를 담당하는 window라는 객체가 웹 문서를 불러 올 때, 문서가 사용되는 시점에 실행되는 onload 라는 함수를 내가 다시 정의한 다는 개념이다.\n\n[참고](https://wiserloner.tistory.com/380) ",
    treePath: "77",
  },
]